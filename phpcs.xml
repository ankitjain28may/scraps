<?xml version="1.0"?>
<ruleset name="FLR">

    <!-- from http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php -->

    <!--
    The name attribute of the ruleset tag is displayed
    when running PHP_CodeSniffer with the -v command line
    argument. The description tag below is not displayed anywhere
    except in this file, so it can contain information for
    developers who may change this file in the future.
    -->
    <description>TitleTales standards</description>

    <!--
    You can hard-code ignore patterns directly into your
    custom standard so you don't have to specify the
    patterns on the command line.

    The following two tags are equivalent to the command line
    argument: - -ignore=*/tests/*,*/data/*

    <exclude-pattern>*/tests/*</exclude-pattern>
    <exclude-pattern>*/data/*</exclude-pattern>
    -->

    <!--
    Include all sniffs in the PEAR standard. Note that the
    path to the standard does not have to be specified as the
    PEAR standard exists inside the PHP_CodeSniffer install
    directory.
    -->
    <rule ref="PEAR">
        <exclude name="PEAR.Classes.ClassDeclaration.OpenBraceNewLine" />
        <exclude name="PEAR.Commenting.ClassComment.Missing" />
        <exclude name="PEAR.Commenting.FileComment.Missing" />
        <exclude name="PEAR.Commenting.FunctionComment.Missing" />
        <exclude name="PEAR.ControlStructures.ControlSignature" />
        <exclude name="PEAR.Files.IncludingFile.BracketsNotRequired" />
        <exclude name="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket" />
        <exclude name="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket" />
        <exclude name="PEAR.Functions.FunctionDeclaration.BraceOnSameLine" />
        <exclude name="PEAR.NamingConventions.ValidClassName.Invalid" />
        <exclude name="PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps" />
        <exclude name="PEAR.WhiteSpace.ScopeClosingBrace.Line" />
        <exclude name="PEAR.WhiteSpace.ScopeIndent.Incorrect" />

        <!-- I think this makes sense, but need to discuss with team first -->
        <exclude name="PEAR.ControlStructures.MultiLineCondition.StartWithBoolean" />

        <!-- I'd like to have the reverse of these be enabled somehow. -->
        <exclude name="PEAR.NamingConventions.ValidVariableName.PublicUnderscore" />
    </rule>

    <!--
    Include all sniffs in the Squiz standard except one. Note that
    the name of the sniff being excluded is the code that the sniff
    is given by PHP_CodeSniffer and is based on the file name and
    path of the sniff class. You can display these codes using the
    -s command line argument when checking a file.
    -->
    <rule ref="Squiz">
        <exclude name="Squiz.Arrays.ArrayBracketSpacing.SpaceAfterBracket" />
        <exclude name="Squiz.Classes.ClassDeclaration.OpenBraceNewLine" />
        <exclude name="Squiz.Classes.ValidClassName.NotCamelCaps" />
        <exclude name="Squiz.Commenting.BlockComment.LineIndent" />
        <exclude name="Squiz.Commenting.ClassComment.Missing" />
        <exclude name="Squiz.Commenting.ClosingDeclarationComment.Missing" />
        <exclude name="Squiz.Commenting.FileComment.Missing" />
        <exclude name="Squiz.Commenting.FunctionComment.Missing" />
        <exclude name="Squiz.Commenting.FunctionCommentThrowTag.Missing" />
        <exclude name="Squiz.Commenting.PostStatementComment.Found" />
        <exclude name="Squiz.Commenting.VariableComment.WrongStyle" />
        <exclude name="Squiz.ControlStructures.ControlSignature" />
        <exclude name="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterOpen" />
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.SpacingBeforeElse" />
        <exclude name="Squiz.Files.FileExtension.ClassFound" />
        <exclude name="Squiz.Formatting.OperatorBracket.MissingBrackets" />
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterOpen" />
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingBeforeClose" />
        <exclude name="Squiz.Functions.GlobalFunction.Found" />
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" />
        <exclude name="Squiz.NamingConventions.ConstantCase.Found" />
        <exclude name="Squiz.NamingConventions.ValidFunctionName.ScopeNotCamelCaps" />
        <exclude name="Squiz.NamingConventions.ValidVariableName.NotCamelCaps" />
        <exclude name="Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue" />
        <exclude name="Squiz.PHP.CommentedOutCode" />
        <exclude name="Squiz.PHP.DisallowComparisonAssignment.AssignedComparison" />
        <exclude name="Squiz.PHP.DisallowInlineIf.Found" />
        <exclude name="Squiz.PHP.DisallowMultipleAssignments.Found" />
        <exclude name="Squiz.PHP.EmbeddedPhp.NoSemicolon" />
        <exclude name="Squiz.PHP.GlobalKeyword.NotAllowed" />
        <exclude name="Squiz.PHP.Heredoc.NotAllowed" />
        <exclude name="Squiz.PHP.LowercasePHPFunctions.KeywordUppercase" />
        <exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpaceBeforeCloseBrace" />
        <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose" />
        <exclude name="Squiz.WhiteSpace.FunctionSpacing.After" />
        <exclude name="Squiz.WhiteSpace.LanguageConstructSpacing.Incorrect" />
        <exclude name="Squiz.WhiteSpace.MemberVarSpacing.After" />
        <exclude name="Squiz.WhiteSpace.ScopeClosingBrace.ContentBefore" />

        <!-- I'd like to have the reverse of these be enabled somehow. -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NotLowerCase" />
        <exclude name="Squiz.ControlStructures.ElseIfDeclaration.NotAllowed" />
        <exclude name="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceAfterOpen" />
        <exclude name="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceBeforeClose" />
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.BreakIndent" />
        <exclude name="Squiz.PHP.DiscouragedFunctions.Discouraged" />
        <exclude name="Squiz.PHP.ForbiddenFunctions.FoundWithAlternative" />
        <exclude name="Squiz.PHP.NonExecutableCode.ReturnNotRequired" />
        <exclude name="Squiz.PHP.NonExecutableCode.ReturnNotRequired" />
        <exclude name="Squiz.Strings.ConcatenationSpacing.Missing" />
        <exclude name="Squiz.WhiteSpace.OperatorSpacing.NoSpaceAfterAmp" />

        <!-- This one I like sometimes but not always. -->
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />

        <!-- If we could specify the span, it would be OK -->
        <exclude name="Squiz.Commenting.LongConditionClosingComment.Missing" />

        <!-- This is good in many cases, but sometimes you want to check count() when the size of the array can change in the loop -->
        <exclude name="Squiz.PHP.DisallowSizeFunctionsInLoops.Found" />

        <!-- This we want, but right now it is way too noisy. -->
        <exclude name="Squiz.Strings.DoubleQuoteUsage.NotRequired" />
    </rule>

    <rule ref="Generic">
        <exclude name="Generic.Files.LineLength.MaxExceeded" />
        <exclude name="Generic.Formatting.MultipleStatementAlignment.NotSame" />
        <exclude name="Generic.Formatting.SpaceAfterCast.NoSpace" />
        <exclude name="Generic.Functions.CallTimePassByReference.NotAllowed" />
        <exclude name="Generic.Functions.FunctionCallArgumentSpacing.NoSpaceAfterComma" />
        <exclude name="Generic.PHP.LowerCaseConstant.Found" />
        <exclude name="Generic.PHP.NoSilencedErrors.Discouraged" />
        <exclude name="Generic.VersionControl.SubversionProperties.Unexpected" />

        <!-- This one is tripped by each instance of require(...); exit; -->
        <exclude name="Generic.Formatting.DisallowMultipleStatements.SameLine" />

        <!-- I'd like to have the reverse of these be enabled somehow. -->
        <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine" />

        <!-- These two we want, but right now they are way too noisy. -->
        <exclude name="Generic.ControlStructures.InlineControlStructure.Discouraged" />
        <exclude name="Generic.WhiteSpace.ScopeIndent.Incorrect" />
    </rule>

    <rule ref="Zend">
        <exclude name="Zend.NamingConventions.ValidVariableName.MemberVarNotCamelCaps" />

        <!-- Can I make exceptions on these? -->
        <exclude name="Zend.NamingConventions.ValidVariableName.ContainsNumbers" />

        <!-- I'd like to have the reverse of these be enabled somehow. -->
        <exclude name="Zend.Files.ClosingTag.NotAllowed" />
    </rule>

    <!--
    Include some specific sniffs from the Generic standard.
    Note again that the name of the sniff is the code that
    PHP_CodeSniffer gives it.

    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    -->

    <!--
    Here we are including a specific sniff but also changing
    the error message of a specific message inside the sniff.
    Note that the specific code for the message, which is
    CommentFound in this case, is defined by the sniff developer.
    You can display these codes by using the -s command line
    argument when checking a file.

    Also note that this message has a variable inside it,
    which is why it is important that sniffs use a printf style
    format for their error messages.

    We also drop the severity of this message from the
    default value (5) so that it is hidden by default. It can be
    displayed by setting the minimum severity on the PHP_CodeSniffer
    command line. This is great if you want to use some messages
    only in code reviews and not have them block code commits.

    <rule ref="Generic.Commenting.Todo.CommentFound">
        <message>Please review this TODO comment: %s</message>
        <severity>3</severity>
    </rule>
    -->

    <!--
    Here we change two messages from the same sniff. Note how the
    codes are slightly different because the sniff developer has
    defined both a MaxExceeded message and a TooLong message. In the
    case of this sniff, one is used for warnings and one is used
    for errors.

    <rule ref="Generic.Files.LineLength.MaxExceeded">
        <message>Line contains %s chars, which is longer than the max limit of %s</message>
    </rule>
    <rule ref="Generic.Files.LineLength.TooLong">
        <message>Line longer than %s characters; contains %s characters</message>
    </rule>
    -->

    <!--
    Some sniffs have public member vars that allow you to
    customise specific elements of the sniff. In the case of
    the Generic LineLength sniff, you can customise the limit
    at which the sniff will throw warnings and the limit at
    which it will throw errors.

    The rule below includes the LineLength sniff but changes the
    settings so the sniff will show warnings for any line longer
    than 90 chars and errors for any line longer than 100 chars.
    -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="90"/>
            <property name="absoluteLineLimit" value="100"/>
        </properties>
    </rule>

    <!--
    Boolean values should be specified by using the strings
    "true" and "false" rather than the integers 0 and 1.
    -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="8"/>
            <property name="ignoreMultiLine" value="true"/>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!--
    If you want to completely disable an error message in a sniff
    but you don't want to exclude the whole sniff, you can
    change the severity of the message to 0. In this case, we
    want the Squiz DoubleQuoteUsage sniff to be included in our
    standard, but we don't want the ContainsVar error message to
    ever be displayed.
    -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>

    <!--
    There is a special internal error message produced by PHP_CodeSniffer
    when it is unable to detect code in a file, possible due to
    the use of short open tags even though php.ini disables them.
    You can disable this message in the same way as sniff messages.

    Again, the code here will be displayed in the PHP_CodeSniffer
    output when using the -s command line argument while checking a file.
    -->
    <rule ref="Internal.NoCodeFound">
        <severity>0</severity>
    </rule>

</ruleset>
